// components/Order/PurchaseModal/PurchaseModal.tsx
import React, { useState } from 'react';
import { Modal, Steps, Button, Radio, Card, Typography, Image, Result, Spin } from 'antd';
import { CreditCardOutlined, CheckCircleOutlined, CloseCircleOutlined } from '@ant-design/icons';
import moment from 'moment';
import type { Course } from '../../../types/course';
import type { Order, PaymentMethod } from '../../../types/order';
import './PurchaseModal.css';

const { Title, Text } = Typography;
const { Step } = Steps;

/**
 * ‚úÖ PURCHASE MODAL COMPONENT
 * 
 * Modal ph·ª©c t·∫°p ƒë·ªÉ handle lu·ªìng mua h√†ng
 * Steps: Confirm ‚Üí Payment ‚Üí Result
 */

interface PurchaseModalProps {
  visible: boolean;                    // Modal c√≥ hi·ªÉn th·ªã kh√¥ng
  onClose: () => void;                 // ƒê√≥ng modal
  course: Course | null;               // Kh√≥a h·ªçc ƒë∆∞·ª£c ch·ªçn mua
  purchaseType: 'direct' | 'cart';     // Mua tr·ª±c ti·∫øp hay t·ª´ gi·ªè h√†ng
  onPurchaseSuccess?: (order: Order) => void; // Callback khi mua th√†nh c√¥ng
}

const PurchaseModal: React.FC<PurchaseModalProps> = ({
  visible,
  onClose,
  course,
  purchaseType,
  onPurchaseSuccess
}) => {
  
  // ‚úÖ LOCAL STATE cho purchase flow
  const [currentStep, setCurrentStep] = useState(0);
  const [selectedPaymentMethod, setSelectedPaymentMethod] = useState<PaymentMethod | null>(null);
  const [isProcessing, setIsProcessing] = useState(false);
  const [purchaseResult, setPurchaseResult] = useState<{
    success: boolean;
    order?: Order;
    error?: string;
  } | null>(null);

  // ‚úÖ PAYMENT METHODS CONFIGURATION
  const paymentMethods = [
    { value: 'VN_PAY' as PaymentMethod, label: 'VN Pay', icon: 'üè¶' },
    { value: 'MOMO' as PaymentMethod, label: 'Momo', icon: 'üì±' },
    { value: 'BANK_TRANSFER' as PaymentMethod, label: 'Chuy·ªÉn kho·∫£n ng√¢n h√†ng', icon: 'üí≥' }
  ];

  // ‚úÖ FORMAT PRICE HELPER
  const formatPrice = (price: number) => {
    return new Intl.NumberFormat('vi-VN', {
      style: 'currency',
      currency: 'VND'
    }).format(price);
  };

  // ‚úÖ RESET MODAL STATE khi ƒë√≥ng
  const handleCancel = () => {
    setCurrentStep(0);
    setSelectedPaymentMethod(null);
    setIsProcessing(false);
    setPurchaseResult(null);
    onClose();
  };

  // ‚úÖ X·ª¨ L√ù MUA H√ÄNG
  const handleConfirmPurchase = async () => {
    if (!course || !selectedPaymentMethod) return;
    
    setIsProcessing(true);
    setCurrentStep(1); // Chuy·ªÉn sang step Payment
    
    try {
      // Simulate payment processing
      await new Promise(resolve => setTimeout(resolve, 2000));
      
      // ‚úÖ G·ªåI API T·∫†O ƒê∆†N H√ÄNG
      const { createOrderByCourseService } = await import('../../../services/orderService');
      const response = await createOrderByCourseService(course.id);
      
      // ‚úÖ SUCCESS CASE
      setPurchaseResult({
        success: true,
        order: response.data
      });
      setCurrentStep(2); // Chuy·ªÉn sang step Result
      
      // Callback cho parent component
      if (onPurchaseSuccess) {
        onPurchaseSuccess(response.data);
      }
      
    } catch (error: any) {
      // ‚úÖ ERROR CASE
      setPurchaseResult({
        success: false,
        error: error.message || 'C√≥ l·ªói x·∫£y ra trong qu√° tr√¨nh thanh to√°n'
      });
      setCurrentStep(2); // Chuy·ªÉn sang step Result
    } finally {
      setIsProcessing(false);
    }
  };

  // ‚úÖ GET STEP STATUS
  const getStepStatus = (stepIndex: number) => {
    if (currentStep > stepIndex) return 'finish';
    if (currentStep === stepIndex) return isProcessing ? 'process' : 'process';
    return 'wait';
  };

  // ‚úÖ RENDER CONFIRMATION STEP
  const renderConfirmationStep = () => (
    <div className="purchase-confirmation">
      {/* Course Summary */}
      <Card className="course-summary" size="small">
        <div className="course-summary-content">
          <Image
            src={course?.thumbnailUrl || '/assets/default-course.jpg'}
            alt={course?.title}
            width={80}
            height={80}
            style={{ borderRadius: 8, objectFit: 'cover' }}
            preview={false}
          />
          
          <div className="course-details">
            <Title level={4} style={{ margin: 0 }}>
              {course?.title}
            </Title>
            <Text type="secondary">{course?.authorName}</Text>
            <br />
            <Text type="secondary">Ch·ªß ƒë·ªÅ: {course?.categoryName}</Text>
            <br />
            <Title level={3} style={{ color: '#1890ff', margin: '8px 0 0 0' }}>
              {course && formatPrice(course.price)}
            </Title>
          </div>
        </div>
      </Card>

      {/* Payment Methods */}
      <div className="payment-method-section">
        <Title level={5}>Ch·ªçn ph∆∞∆°ng th·ª©c thanh to√°n:</Title>
        <Radio.Group
          value={selectedPaymentMethod}
          onChange={(e) => setSelectedPaymentMethod(e.target.value)}
          className="payment-methods"
        >
          {paymentMethods.map(method => (
            <Radio.Button 
              key={method.value} 
              value={method.value} 
              className="payment-option"
            >
              <span className="payment-icon">{method.icon}</span>
              {method.label}
            </Radio.Button>
          ))}
        </Radio.Group>
      </div>

      {/* Purchase Info */}
      <Card size="small" style={{ marginTop: 16, background: '#f6ffed' }}>
        <Text type="secondary" style={{ fontSize: 12 }}>
          <strong>Lo·∫°i mua h√†ng:</strong> {purchaseType === 'direct' ? 'Mua tr·ª±c ti·∫øp' : 'Mua t·ª´ gi·ªè h√†ng'}
          <br />
          <strong>Th·ªùi gian:</strong> {moment().format('DD/MM/YYYY HH:mm')}
        </Text>
      </Card>
    </div>
  );

  // ‚úÖ RENDER PROCESSING STEP
  const renderProcessingStep = () => (
    <div className="purchase-processing">
      <Spin size="large" />
      <Title level={4} style={{ textAlign: 'center', marginTop: 16 }}>
        ƒêang x·ª≠ l√Ω thanh to√°n...
      </Title>
      <Text type="secondary" style={{ textAlign: 'center', display: 'block' }}>
        Vui l√≤ng kh√¥ng ƒë√≥ng c·ª≠a s·ªï n√†y
      </Text>
    </div>
  );

  // ‚úÖ RENDER SUCCESS RESULT
  const renderSuccessResult = () => (
    <Result
      status="success"
      title="Mua kh√≥a h·ªçc th√†nh c√¥ng!"
      subTitle={`ƒê∆°n h√†ng #${purchaseResult?.order?.id} ƒë√£ ƒë∆∞·ª£c t·∫°o. B·∫°n c√≥ th·ªÉ b·∫Øt ƒë·∫ßu h·ªçc ngay.`}
      extra={[
        <Button type="primary" key="start-learning" onClick={handleCancel}>
          B·∫Øt ƒë·∫ßu h·ªçc
        </Button>,
        <Button key="view-orders" onClick={() => {
          handleCancel();
          // TODO: Navigate to orders page
        }}>
          Xem ƒë∆°n h√†ng
        </Button>
      ]}
    />
  );

  // ‚úÖ RENDER ERROR RESULT
  const renderErrorResult = () => (
    <Result
      status="error"
      title="Thanh to√°n th·∫•t b·∫°i"
      subTitle={purchaseResult?.error || 'ƒê√£ c√≥ l·ªói x·∫£y ra trong qu√° tr√¨nh thanh to√°n. Vui l√≤ng th·ª≠ l·∫°i.'}
      extra={[
        <Button type="primary" key="retry" onClick={() => {
          setCurrentStep(0);
          setPurchaseResult(null);
        }}>
          Th·ª≠ l·∫°i
        </Button>,
        <Button key="close" onClick={handleCancel}>
          ƒê√≥ng
        </Button>
      ]}
    />
  );

  // ‚úÖ RENDER CONTENT theo current step
  const renderContent = () => {
    if (purchaseResult) {
      return purchaseResult.success ? renderSuccessResult() : renderErrorResult();
    }
    
    switch (currentStep) {
      case 0:
        return renderConfirmationStep();
      case 1:
        return renderProcessingStep();
      default:
        return renderConfirmationStep();
    }
  };

  // ‚úÖ GET MODAL FOOTER
  const getModalFooter = () => {
    if (purchaseResult || currentStep === 1) {
      return null; // Result components c√≥ buttons ri√™ng, processing kh√¥ng c·∫ßn footer
    }

    return [
      <Button key="cancel" onClick={handleCancel}>
        H·ªßy
      </Button>,
      <Button
        key="confirm"
        type="primary"
        disabled={!selectedPaymentMethod}
        loading={isProcessing}
        onClick={handleConfirmPurchase}
      >
        X√°c nh·∫≠n mua - {course && formatPrice(course.price)}
      </Button>
    ];
  };

  return (
    <Modal
      title="X√°c nh·∫≠n mua kh√≥a h·ªçc"
      open={visible}
      onCancel={handleCancel}
      footer={getModalFooter()}
      width={600}
      className="purchase-modal"
      maskClosable={false}
      destroyOnClose
    >
      <div className="purchase-modal-content">
        {/* ‚úÖ STEPS INDICATOR */}
        <Steps current={currentStep} size="small" style={{ marginBottom: 24 }}>
          <Step 
            title="X√°c nh·∫≠n" 
            status={getStepStatus(0)}
            icon={<CreditCardOutlined />}
          />
          <Step 
            title="Thanh to√°n" 
            status={getStepStatus(1)}
          />
          <Step 
            title="Ho√†n th√†nh" 
            status={getStepStatus(2)}
            icon={purchaseResult?.success ? <CheckCircleOutlined /> : 
                  purchaseResult?.success === false ? <CloseCircleOutlined /> : undefined}
          />
        </Steps>
        
        {/* ‚úÖ STEP CONTENT */}
        <div className="purchase-step-content">
          {renderContent()}
        </div>
      </div>
    </Modal>
  );
};

export default PurchaseModal;